generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id        String  @id @default(uuid())
    email     String  @unique
    password  String
    firstName String
    lastName  String
    phone     String
    salt      String?

    role     UserRole  @default(USER)
    sessions Session[]
    cart     Cart?
    orders   Order[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Session {
    id           String   @id @default(uuid())
    user         User     @relation(fields: [userId], references: [id])
    userId       String
    refreshToken String   @unique
    createdAt    DateTime @default(now())
    expiresAt    DateTime
}

enum UserRole {
    USER
    ADMIN
}

model Category {
    id   Int    @id @default(autoincrement())
    name String @unique
    slug String @unique

    subcategories SubCategory[]

    books Book[]
}

model SubCategory {
    id   Int    @id @default(autoincrement())
    name String @unique
    slug String @unique

    categoryId Int
    category   Category @relation(fields: [categoryId], references: [id])

    books Book[]
}

model Tag {
    id   Int    @id @default(autoincrement())
    name String
    slug String @unique

    books Book[]
}

model Book {
    id          Int    @id @default(autoincrement())
    title       String
    description String

    price    Int
    oldPrice Int?

    //rating      Rating?

    tags          Tag[]
    subcategoryId Int
    subcategory   SubCategory @relation(fields: [subcategoryId], references: [id])

    categoryId Int
    category   Category @relation(fields: [categoryId], references: [id])

    // Связь с изображениями
    images BookImage[]

    specs BookSpec[]

    authorId Int
    author   Author @relation(fields: [authorId], references: [id])

    cartItem CartItem[]
}

model BookImage {
    id    Int    @id @default(autoincrement())
    url   String
    order Int    @default(0)

    bookId Int
    book   Book @relation(fields: [bookId], references: [id])

    @@unique([bookId, order]) // уникальность порядка в рамках одной книги
}

model BookSpec {
    id    Int    @id @default(autoincrement())
    name  String
    value String

    book   Book @relation(fields: [bookId], references: [id], onDelete: Cascade)
    bookId Int
}

model Author {
    id          Int     @id @default(autoincrement())
    name        String
    description String?
    books       Book[]

    yearsOfLife String
}

model Cart {
    id Int @id @default(autoincrement())

    token String @unique

    totalAmount   Int @default(0)
    totalQuantity Int @default(0)
    totalSale     Int @default(0)

    user   User?   @relation(fields: [userId], references: [id])
    userId String? @unique

    cartItems CartItem[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model CartItem {
    id Int @id @default(autoincrement())

    cart   Cart @relation(fields: [cartId], references: [id], onDelete: Cascade)
    cartId Int

    bookId Int?
    book   Book? @relation(fields: [bookId], references: [id])

    quantity Int @default(1)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Order {
    id Int @id @default(autoincrement())

    userId String? @unique
    user   User?   @relation(fields: [userId], references: [id])

    status    OrderStatus @default(PENDING)
    paymentId String?

    deliveryType DeliveryStatus
    items        Json

    fullname String
    email    String
    phone    String
    address  String
    comment  String

    itemsAmount   Int
    deliveryPrice Int
    totalAmount   Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum OrderStatus {
    PENDING
    SUCCEEDED
    CANCELED
}

enum DeliveryStatus {
    STANDART
    EXPRESS
    PICKUP
}
